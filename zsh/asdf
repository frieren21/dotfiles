#!zsh

autoload -Uz die
trap die EXIT

source "${ASDF_DIR}/lib/asdf.sh"
functions -c asdf asdf.orig

autoload -Uz path-add
path-add path "${ASDF_BIN}"

asdf() {
    if [[ $1 == "add-path" ]]; then
        path-add path "$(asdf where $2)/bin"

    elif [[ $1 == "install-fast" ]]; then
        local plugin=${2:-$(asdf plugin list all | fzf | awk '{print $1}')}
        if [[ -z ${plugin} ]]; then
            die "no plugin selected"
        fi

        if [[ ! -e "${ASDF_DATA_DIR}/plugins/${plugin}" ]]; then
            asdf plugin add ${plugin}
        else
            asdf plugin update ${plugin}
        fi

        local version=$3
        case ${version} in
        current)
            local -A current=($(<${ASDF_DEFAULT_TOOL_VERSIONS_FILENAME}))
            version=${current[${plugin}]:-$(asdf latest ${plugin})}
            ;;

        latest)
            version=$(asdf latest ${plugin})
            ;;

        "")
            version=$(asdf list all ${plugin} | fzf --tac)
            ;;
        esac

        if [[ -z ${version} ]]; then
            die "${plugin}: no version selected / found"
        fi

        if ! asdf list all ${plugin} | grep -q "^${version}$"; then
            die "${plugin}: version ${version} not found"
        fi

        if [[ ! -e "${ASDF_DATA_DIR}"/installs/${plugin}/${version} ]]; then
            asdf install ${plugin} ${version} || die "install failed"
        fi

        if [[ $2 == latest ]]; then
            asdf global ${plugin} ${version}
        fi

        if [[ -e "${PWD}/.tool-versions" ]]; then
            asdf local ${plugin} ${version}
        fi

    else
        asdf.orig "$@"
    fi
}

asdf "$@"
